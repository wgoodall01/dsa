#!/usr/bin/env bash

_proj_fatal(){
	echo "proj:" "$@"
	return 1
}

# Update all repos listed in ./manifest
proj_update()(
	if [[ $# != 0 ]]; then
		cat <<EOF
proj update - updates project repos

Usage:
	proj update

'proj update' will:
	clone, or fetch commits, for every repo in ./manifest

EOF
		return 2
	fi

	local success=true

	while read -r repo_path; do
		local name="${repo_path##*/}" # from repo/name to name
		local dir="$root/src/$name"
		if [[ ${#name} -eq 0 ]]; then
			: # Skip, blank line in manifest
		elif [[ -d "$dir" ]]; then
			echo "--- Updating $name..."
			pushd "$dir" >/dev/null
			git fetch --all || success=false
			popd >/dev/null
			echo ""
		else
			echo "--- Cloning $name..."
			pushd "$root/src" >/dev/null
			hub clone "$repo_path" || success=false
			popd >/dev/null
			echo ""
		fi
	done <"$root/manifest"

	if ! $success; then
		_proj_fatal "completed with errors."
	fi
)

# Copy template files to a repo
proj_template(){
	if [[ $# != 1 ]]; then
		cat <<EOF
proj template - copies template files to a repo

Usage:
	proj template <repo name>

'proj template' will:
	Copy a bunch of stuff into that folder
	Change some values for the individual repo

EOF
		return 2
	fi

	local name="$1"
	local Name
	Name="$(tr '[:lower:]' '[:upper:]' <<< "${name:0:1}")${name:1}"
	local repo_path="$root/src/$name"

	# Template files for new project
	cp -r "$root"/template/* "$repo_path";
	rm -rf\
		"$repo_path/build"\
		"$repo_path/_lab.log" # Delete some stuff which munges up cmake

	# Edit some files, leaving a .bak in case of failure
	LANG=C find "$repo_path" -type f -not -iwholename '*.git/*' -exec\
		sed -i.bak \
		-e "s/templateProj/$name/g" \
		-e "s/TemplateProj/$Name/g" \
		{} \;
	
	# Clean up everything.
	rm -f "$repo_path"/**/*.bak "$repo_path"/*.bak
}

proj_clone(){
	if [[ $# != 1 ]]; then
		cat <<EOF
proj clone - Clones a repo, adding it to the manifest

Usage:
	proj clone <repo path (with org) or name>

'proj clone' will:
	run a 'hub clone' to pull down the repo
	add the repo to the manifest

EOF
		return 2
	fi

	#repo path, like 'MKA-DSA-18-19/summer-assignment-wgoodall01'
	local path="$1"
	local name="${path##*/}" # from repo/name to name

	cd "$root/src"
	hub clone "$path" || _proj_fatal "couldn't clone repo with 'hub clone'"

	cd "$root/src/$name" # useful for the function version

	# add the project to the manifest
	echo "$path" >> "$root/manifest"
	sort -u -o "$root/manifest" "$root/manifest"
}

proj_init(){
	if [[ $# != 1 ]]; then
		cat <<EOF
proj init - Sets up a repo for work

Usage:
	proj clone <repo path (with org) or name>

'proj clone' will:
	run a 'hub clone' to pull down the repo
	add the repo to the manifest
	Copy template files to the repo

EOF
		return 2
	fi

	local path="$1"
	local name="${path##*/}" # from repo/name to name

	[[ ! -d "$root/src/$name" ]] && proj_clone "$path"
	proj_template "$name"

	echo "Running cmake"
	(cd "$root/src/$name" && cmake .)>/dev/null
}

proj_help(){
		cat <<EOF 
proj - Manage projects for Data Structures and Algorithms

Usage: 
	proj <subcommand> [args]

Subcommands:
	update    clones/fetches all repos in the manifest
	template  Copies over template files into a repo
	clone     Clones a project fro github, adds to the manifest
	init      proj clone && proj template
	help      show this message

EOF
}

# dirty hack for ./proj --help
proj_--help(){
	proj_help
}

proj()(
	set -ue
	shopt -s dotglob

	local root
	root="$DSA_PROJ_ROOT"

	# load the config
	# shellcheck source=./config.sh
	source "$root/config.sh" 

	# bail if hub isn't there.
	hub --version >/dev/null || _proj_fatal "hub not installed"

	if [[ $# -lt 1 ]]; then
		proj_help
		return 2
	fi

	local subcommand="$1"
	shift

	local func_name="proj_$subcommand"
	if [[ "$(type -t "$func_name")" == "function" ]]; then
		"$func_name" "$@"
	else 
		echo "proj: unknown subcommand $subcommand"
	fi

)

DSA_PROJ_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/" && pwd )"

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
	echo "defined function 'proj'"
else
	proj "$@"
fi
